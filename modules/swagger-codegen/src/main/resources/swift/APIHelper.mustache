// APIHelper.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import UIKit

class APIHelper {
    static func rejectNil(source: [String:AnyObject?]) -> [String:AnyObject]? {
        var destination = [String:AnyObject]()
        for (key, nillableValue) in source {
            if let value: AnyObject = nillableValue {
                destination[key] = value
            }
        }

        if destination.isEmpty {
            return nil
        }
        return destination
    }
	
	static func genericCall<Body: JSONEncodable, Return: JSONEncodable>(requiresOauth: Bool = true, headers: [String:String] = [:], path: String, body: Body, success: (Return?) -> (), failure: (ErrorType) -> ()) {

		var mutableHeaders = headers
		if requiresOauth {
			guard let authHeaders = Network.Header.standardIncludeAuth else {
				assertionFailure("Could not create an auth header")
				return
			}
			mutableHeaders.unionInPlace(authHeaders)
		}
		let url = Network.urlForEndpoint(path)
		let parameters: [String : AnyObject]

		let jsonBody = body.encodeToJSON()
		if let arrayParams = jsonBody as? [AnyObject] {
			parameters = arrayParams[0] as! [String: AnyObject]
		}
		else {
			parameters = jsonBody as! [String : AnyObject]
		}

		let request = NetworkRequestorWithResultType<Return>(method: "POST", URL: url, headers: mutableHeaders, parameters: parameters)

		request.sendWithResult(success, failure: failure)
	}
}

extension NSHTTPURLResponse {
    var isValid: Bool {
        return (self.statusCode > 199 && self.statusCode < 401) ? true : false
    }
}

let NotificationNameTokenRefresh = "TokenRefreshed"

extension Dictionary {
	mutating func unionInPlace(
		dictionary: Dictionary<Key, Value>) {
		for (key, value) in dictionary {
			self[key] = value
		}
	}

	// Thanks Airspeed Velocity
	mutating func unionInPlace<S: SequenceType where
		S.Generator.Element == (Key,Value)>(sequence: S) {
		for (key, value) in sequence {
			self[key] = value
		}
	}
}