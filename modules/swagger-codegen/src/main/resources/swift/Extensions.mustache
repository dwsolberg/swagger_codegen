// Extensions.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

extension Bool: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Float: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Int: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension Double: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

extension String: JSONEncodable {
    func encodeToJSON() -> Any { return self }
}

private func encodeIfPossible<T>(_ object: T) -> Any {
    if object is JSONEncodable {
        return (object as! JSONEncodable).encodeToJSON()
    } else {
        return object as Any
    }
}

extension Array: JSONEncodable {
    func encodeToJSON() -> Any {
        return self.map(encodeIfPossible)
    }
}

extension Dictionary: JSONEncodable {
    func encodeToJSON() -> Any {
        var dictionary = [NSObject:Any]()
        for (key, value) in self {
            dictionary[key as! NSObject] = encodeIfPossible(value)
        }
        return dictionary
    }
}

private let dateFormatter: DateFormatter = {
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd"
    return dateFormatter
}()

extension Date: JSONEncodable {
    func encodeToJSON() -> Any {
        return dateFormatter.string(from: self)
    }
}