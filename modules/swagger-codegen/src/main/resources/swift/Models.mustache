// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }

		// This adds a decoder for an array of these objects
		addArrayDecoder { (source: AnyObject) -> Array<T> in
			let sourceArray = source as! [AnyObject]
			return sourceArray.map {return decode($0)}
		}
    }

	static func addArrayDecoder<T>(decoder: ((AnyObject) -> T)) {
		let key = "\(T.self)"
		decoders[key] = { decoder($0) as! AnyObject }
	}

    static func decodeDictionary<T, Key: Hashable>(source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(value)
        }
        return dictionary
    }
    
    static func decode<T>(source: AnyObject) -> T {
        if self.decoders.count == 0 {
           initialize()
        }
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        }

		else {
            fatalError("Source \(source) is not convertible to type \(String(T.Type)): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>( source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
		
        return source.map(Decoders.decode)
    }
	
    static private func initialize() {
        {{#models}}{{#model}}

        // Decoder for {{{classname}}}
        Decoders.addDecoder() { (source: AnyObject) -> {{{classname}}} in
            let sourceDictionary = source as! [NSObject:AnyObject]
            let instance: {{classname}} = {{classname}}(){{#vars}}
            instance.{{name}} = Decoders.decode(sourceDictionary["{{name}}"]){{/vars}}
            return instance
        }{{/model}}
        {{/models}}
    }
}
