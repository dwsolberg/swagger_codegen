//
// NetworkHelper.swift
// API Version {{appVersion}}
//

import Foundation

/// A method to combine dictionaries of type [String:String]
func +(lhs: [String:String], rhs: [String:String]) -> [String:String] {
    var base = [String:String]()
    lhs.forEach { (key, value) -> () in
        base.updateValue(value, forKey: key)
    }
    rhs.forEach { (key, value) -> () in
        base.updateValue(value, forKey: key)
    }
    return base
}

struct Network {

    static let basePath = "http://dev.myibucketlist.com/api/v1"

    // Note: The programmer needs to manually enter the client_id and secret 
    struct OAuth {
        static let grant_type_password = "password"
        static let grant_type_refresh = "refresh_token"
        static let client_id = "6eea945069226202db5c0479d531fdb805ba333eedd0a5bd95c534fcb661a865"
        static let client_secret = "ccfcc9f3040e127a9835c39c2c898809adfb2c8506e4849f6f9b505c0299f7c2"
    }
    
    static func urlByAppending(endpoint: String) -> URL {
        return URL(string: Network.basePath + endpoint)!
    }
    
    struct Header {
        static let json = ["Content-Type":"application/json"]
        
        static func auth() -> [String:String]? {
            guard let token = Token.header else { return nil }
            return ["Authorization":"Bearer " + token]
        }
        
        static var standardIncludeAuth: [String:String]? {
            guard let auth = Network.Header.auth() else { return nil }
            return Network.Header.json + auth
        }
    }
}