//
//  AuthAPI.swift
//  Created by David Solberg on 12/18/15.
//  Generated by Swagger
//

import Foundation

class AuthAPI {
    
    static let oauthURLString = "http://dev.myibucketlist.com/oauth/token"
    static let url = NSURL(string: oauthURLString)!
    static private(set) var isRefreshingToken = false
    
    /// Creates and securely saves a token if one exists from the account. Check the result for success to determine whether a token was granted.
    static func authorizeAccount(account: Account, body: Account, success: (Oauth_info?) -> (), failure: (ErrorType) -> ()) {
        guard isRefreshingToken == false else {
            assertionFailure("Should not happen!")
            return
        }
        isRefreshingToken = true
        let parameters =
        [
            "grant_type":Network.OAuth.grant_type_password,
            "username":account.email,
            "password":account.password,
            "client_id":Network.OAuth.client_id,
            "client_secret":Network.OAuth.client_secret
        ]
        
		NetworkRequestorWithResultType<Oauth_info>.init(method: "POST", URL: url, headers: Network.Header.json, parameters: parameters).sendWithResult({processSuccess($0, success: success)}, failure: {processFailure($0, failure: failure)})
    }
    

    /// Refreshes the existing token if there is one. If no token exists, returns false. Also check the completion block to see whether the refresh was successful.
    static func refreshToken(success: (Oauth_info?) -> (), failure: (ErrorType) -> ()) -> Bool {

        guard let refreshtoken = Token.refresh else { return false }
        guard isRefreshingToken == false else {
            assertionFailure("Should not happen!")
            return false
        }
        isRefreshingToken = true
        let parameters =
        [
            "grant_type":Network.OAuth.grant_type_refresh,
            "refresh_token":refreshtoken
        ]
        
        NetworkRequestorWithResultType<Oauth_info>.init(method: "POST", URL: url, headers: Network.Header.json, parameters: parameters).sendWithResult({processSuccess($0, success: success)}, failure: {processFailure($0, failure: failure)})
        return true
    }

	static func processFailure(error: ErrorType, failure: (ErrorType) -> ()) {
		isRefreshingToken = false
		NSNotificationCenter.defaultCenter().postNotificationName(NotificationNameTokenRefresh, object: nil)
		failure(error)
	}

	static func processSuccess(info: Oauth_info?, success: (Oauth_info?) -> ()) {

		if let accessToken = info?.access_token {
			Token.header = accessToken
		}
		if let refreshToken = info?.refresh_token {
			Token.refresh = refreshToken
		}
		isRefreshingToken = false
		NSNotificationCenter.defaultCenter().postNotificationName(NotificationNameTokenRefresh, object: nil)
		success(info)
	}
}




