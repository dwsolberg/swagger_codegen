{{#operations}}//
// {{classname}}.swift
// API Version {{appVersion}}
// Generated: {{generatedDate}}
//

class {{classname}} {
{{#operation}}
    /**{{#summary}}
     {{{summary}}}{{/summary}}
     - {{httpMethod}}: {{path}}{{#notes}}
     - {{{notes}}}{{/notes}}{{#subresourceOperation}}
     - subresourceOperation: {{subresourceOperation}}{{/subresourceOperation}}
     {{#authMethods}}- {{#isOAuth}}OAuth{{/isOAuth}}{{/authMethods}}{{#responseHeaders}}
     - responseHeaders: {{responseHeaders}}{{/responseHeaders}}{{#externalDocs}}
     - externalDocs: {{externalDocs}}{{/externalDocs}}{{#hasParams}}{{#allParams}}
     - parameter: {{paramName}}: (type: {{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}}{{/allParams}}{{/hasParams}}
     - returns: NetworkResult<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{description}}
     */

    static func {{operationId}}({{#hasParams}}{{#allParams}}{{paramName}}{{#secondaryParam}}{{paramName}}{{/secondaryParam}}: {{{dataType}}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}, {{/hasParams}}success: ({{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}?) -> (), failure: (ErrorType) -> ()) {
{{#authMethods}}{{#isOAuth}}        guard let authHeaders = Network.Header.standardIncludeAuth else {
            assertionFailure("Could not create an auth header")
            return
        }{{/isOAuth}}{{/authMethods}}
        {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} path = "{{path}}"{{#pathParams}}
        path = path.stringByReplacingOccurrencesOfString("{{=<% %>=}}{<%paramName%>}<%={{ }}=%>", withString: "\({{paramName}})", options: .LiteralSearch, range: nil){{/pathParams}}
        let url = Network.urlForEndpoint(path){{#hasParams}}{{#bodyParam}}
        let parameters = {{paramName}}{{^required}}?{{/required}}.encodeToJSON() as! [String : AnyObject]{{/bodyParam}}{{^bodyParam}}
        let nillableParameters: [String:AnyObject?] = {{^queryParams}}{{^formParams}}[:]{{/formParams}}{{#formParams}}{{^secondaryParam}}[{{/secondaryParam}}
            "{{paramName}}": {{paramName}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
        ]{{/hasMore}}{{/formParams}}{{/queryParams}}{{#queryParams}}{{^secondaryParam}}[{{/secondaryParam}}
            "{{paramName}}": {{paramName}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
        ]{{/hasMore}}{{/queryParams}}
        let parameters = APIHelper.rejectNil(nillableParameters){{/bodyParam}}{{/hasParams}}

        let request = NetworkRequestorWithResultType<{{#returnType}}{{{returnType}}}{{/returnType}}>(method: "{{httpMethod}}", URL: url, headers: {{#authMethods}}{{#isOAuth}}authHeaders{{/isOAuth}}{{^isOAuth}}Network.Header.json{{/isOAuth}}{{/authMethods}}{{^authMethods}}Network.Header.json{{/authMethods}}, parameters: {{#hasParams}}parameters{{/hasParams}}{{^hasParams}}nil{{/hasParams}})

		request.sendWithResult(success, failure: failure)
    }
{{/operation}}
}
{{/operations}}
