{{#models}}{{#model}}//
// {{classname}}.swift
// API Version {{appVersion}}
// Generated: {{generatedDate}}
//

import Foundation

{{#description}}/// {{description}}{{/description}}
class {{classname}}: NSObject, JSONEncodable, NSCoding {

    // MARK: - Encoding/Decoding Keys
{{#vars}}    let key_{{name}} = "{{name}}"
{{/vars}}

{{#vendorExtensions}}vendorExtensions {{#x-container-init}}init{{/x-container-init}} {{/vendorExtensions}}

{{#parent}}parent: {{parent}}{{/parent}}
{{#name}}name: {{name}}{{/name}}
{{#classname}}classname: {{classname}}{{/classname}}
{{#classVarName}}classVarName: {{classVarName}}{{/classVarName}}
{{#modelJson}}modelJson: {{modelJson}}{{/modelJson}}
{{#parent}}parent: {{parent}}{{/parent}}
{{#description}}description: {{description}}{{/description}}

    // MARK: - Variables
{{#vars}}{{#description}}    /// {{description}}{{/description}}
    var {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#required}}!{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    
{{/vars}}
    // MARK: - JSONEncodable Protocol Methods
    func encodeToJSON() -> AnyObject {
        var dictionary = [String:AnyObject]()
{{#vars}}{{#required}}
        dictionary[key_{{name}}] = self.{{name}}.encodeToJSON()
{{/required}}{{^required}}
        if let valid_{{name}} = self.{{name}} {
            dictionary[key_{{name}}] = valid_{{name}}.encodeToJSON()
        }{{/required}}{{/vars}}
        return dictionary
    }

    // MARK: - Initializer
{{#shouldInitForRequiredVars}}    init({{#vars}}{{#required}}{{name}}: {{{datatype}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/vars}}) {
{{#vars}}{{#required}}       self.{{name}} = {{name}}
{{/required}}{{/vars}}    }{{/shouldInitForRequiredVars}}{{^shouldInitForRequiredVars}}
    override init() { } ++{{/shouldInitForRequiredVars}}

    // MARK: - NSCoding Protocol Methods
    required init?(coder aDecoder: NSCoder) {
        super.init()
{{#vars}}        if let valid_{{name}} = aDecoder.decodeObjectForKey(key_{{name}}) as? {{{datatype}}} {
            self.{{name}} = valid_{{name}}
        }
{{/vars}}    }

    func encodeWithCoder(aCoder: NSCoder) {
{{#vars}}        aCoder.encodeObject({{name}}, forKey: key_{{name}})
{{/vars}}    }
}{{/model}}
{{/models}}
