{{#models}}{{#model}}//
// {{classname}}.swift
// {{appName}} {{appVersion}}
// Generated: {{generatedDate}}
//

import Foundation

{{#description}}/// {{description}}{{/description}}
@objc({{appName}}_{{classname}})
class {{classname}}: NSObject, JSONEncodable, NSCoding {

{{#isBuildCoreData}}Build Core Data{{/isBuildCoreData}}
{{#isProtocolUUIDType}}UUID Protocol{{/isProtocolUUIDType}}
    // MARK: - Encoding/Decoding Keys
{{#vars}}    let key_{{name}} = "{{name}}"
{{#isIndexed}}isIndexed{{/isIndexed}}{{#referencesForeignTableByUUID}}
References Foreign Table{{/referencesForeignTableByUUID}}{{#referencesTableName}}
{{referencesTableName}}{{/referencesTableName}}
{{/vars}}

    // MARK: - Variables
{{#vars}}{{#description}}    /// {{description}}{{/description}}
    var {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#required}}!{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    
{{/vars}}
    // MARK: - JSONEncodable Protocol Methods
    func encodeToJSON() -> AnyObject {
        var dictionary = [String:AnyObject]()
{{#vars}}{{#required}}
        dictionary[key_{{name}}] = self.{{name}}.encodeToJSON()
{{/required}}{{^required}}
        if let valid_{{name}} = self.{{name}} {
            dictionary[key_{{name}}] = valid_{{name}}.encodeToJSON()
        }{{/required}}{{/vars}}
        return dictionary
    }

    // MARK: - Initializer(s)
{{#isInitRequired}}    convenience init({{#vars}}{{#required}}{{name}}: {{{datatype}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/vars}}) {
        self.init()
{{#vars}}{{#required}}        self.{{name}} = {{name}}
{{/required}}{{/vars}}    }{{/isInitRequired}}

    override init() { }

    // MARK: - NSCoding Protocol Methods
    required init?(coder aDecoder: NSCoder) {
        super.init()
{{#vars}}        if let valid_{{name}} = aDecoder.decodeObjectForKey(key_{{name}}) as? {{{datatype}}} {
            self.{{name}} = valid_{{name}}
        }
{{/vars}}    }

    func encodeWithCoder(aCoder: NSCoder) { 
{{#vars}}        aCoder.encodeObject({{name}}, forKey: key_{{name}}) 
{{/vars}}    }
}{{#isBuildCoreData}}{{#isProtocolUUIDType}} extension {{classname}} {
func createAndOrGetManagedObject(context: NSManagedObjectContext) {
let cd{{classname}}: {{classname}}CD         if let existing =
{{classname}}CD.objectForUuid(uuid, context: context) as? {{classname}}CD {
cd{{classname}} = existing         } else {             if
self.deleted_on_server == true { return }             cd{{classname}} =
NSEntityDescription.insertNewObjectForEntityForName(String({{classname}}CD),
inManagedObjectContext: context) as! {{classname}}CD         }
{{#vars}}{{^referencesForeignTableByUUID}}        cd{{classname}}.{{name}} =
{{name}}{{/referencesForeignTableByUUID}} {{#referencesForeignTableByUUID}}
kjfkldaj fkfjdlkajfkldsa{{/referencesForeignTableByUUID}} {{/vars}}   }
}{{/isProtocolUUIDType}}{{/isBuildCoreData}}{{/model}} {{/models}}
