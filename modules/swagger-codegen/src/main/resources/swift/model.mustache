{{#models}}{{#model}}//
// {{classname}}.swift
// {{appName}} {{appVersion}}
//

import Foundation

{{#description}}/// {{description}}{{/description}}
{{#isBuildCoreData}}// Has Matching Core Data{{/isBuildCoreData}}
@objc({{appName}}_{{classname}})
class {{classname}}: NSObject, JSONEncodable, NSCoding {

    // MARK: - Encoding/Decoding Keys
{{#vars}}    let key_{{name}} = "{{name}}"
{{/vars}}

    // MARK: - Variables
{{#vars}}{{#description}}    /// {{description}}{{/description}}
    var {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#required}}!{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    
{{/vars}}
    // MARK: - JSONEncodable Protocol Methods
    func encodeToJSON() -> AnyObject {
        var dictionary = [String:AnyObject]()
{{#vars}}{{#required}}
        dictionary[key_{{name}}] = self.{{name}}.encodeToJSON()
{{/required}}{{^required}}
        if let valid_{{name}} = self.{{name}} {
            dictionary[key_{{name}}] = valid_{{name}}.encodeToJSON()
        }{{/required}}{{/vars}}
        return dictionary
    }

    // MARK: - Initializer(s)
{{#isInitRequired}}    convenience init({{#vars}}{{#required}}{{name}}: {{{datatype}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/vars}}) {
        self.init()
{{#vars}}{{#required}}        self.{{name}} = {{name}}
{{/required}}{{/vars}}    }

    override init() {
        super.init()
    }
    {{/isInitRequired}}{{^isInitRequired}}          override init() {
        super.init()
    }{{/isInitRequired}}

    // MARK: - NSCoding Protocol Methods
    required init?(coder aDecoder: NSCoder) {
        super.init()
{{#vars}}        if let valid_{{name}} = aDecoder.decodeObjectForKey(key_{{name}}) as? {{{datatype}}} {
            self.{{name}} = valid_{{name}}
        }
{{/vars}}    }

    func encodeWithCoder(aCoder: NSCoder) { 
{{#vars}}        aCoder.encodeObject({{name}}, forKey: key_{{name}}) 
{{/vars}}    }
}{{/model}} {{/models}}
